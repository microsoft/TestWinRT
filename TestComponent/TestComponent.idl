
namespace TestComponent
{
    struct Blittable
    {
        Boolean A;
        UInt8 B;
        UInt16 C;
        UInt32 D;
        UInt64 E;
        Int16 F;
        Int32 G;
        Int64 H;
        Single I;
        Double J;
        Char K;
        Guid L;
    };

    struct NonBlittable
    {
        String A;
        Windows.Foundation.IReference<Int64> B;
    };

    struct Nested
    {
        Blittable Blittable;
        NonBlittable NonBlittable;
    };

    delegate Boolean Param1Handler(Boolean a, out Boolean b);

    interface ITests
    {
        void Simple();

        Boolean Param1(Boolean a, out Boolean b);
        void Param1Call(Param1Handler handler);

        UInt8 Param2(UInt8 a, out UInt8 b);
        UInt16 Param3(UInt16 a, out UInt16 b);
        UInt32 Param4(UInt32 a, out UInt32 b);
        UInt64 Param5(UInt64 a, out UInt64 b);
        Int16 Param6(Int16 a, out Int16 b);
        Int32 Param7(Int32 a, out Int32 b);
        Int64 Param8(Int64 a, out Int64 b);
        Single Param9(Single a, out Single b);
        Double Param10(Double a, out Double b);
        Char Param11(Char a, out Char b);
        String Param12(String a, out String b);
        Blittable Param13(Blittable a, out Blittable b);
        NonBlittable Param14(NonBlittable a, out NonBlittable b);
        Nested Param15(Nested a, out Nested b);

        Boolean[] Array1(Boolean[] a, ref Boolean[] b, out Boolean[] c);
        UInt8[] Array2(UInt8[] a, ref UInt8[] b, out UInt8[] c);
        UInt16[] Array3(UInt16[] a, ref UInt16[] b, out UInt16[] c);
        UInt32[] Array4(UInt32[] a, ref UInt32[] b, out UInt32[] c);
        UInt64[] Array5(UInt64[] a, ref UInt64[] b, out UInt64[] c);
        Int16[] Array6(Int16[] a, ref Int16[] b, out Int16[] c);
        Int32[] Array7(Int32[] a, ref Int32[] b, out Int32[] c);
        Int64[] Array8(Int64[] a, ref Int64[] b, out Int64[] c);
        Single[] Array9(Single[] a, ref Single[] b, out Single[] c);
        Double[] Array10(Double[] a, ref Double[] b, out Double[] c);
        Char[] Array11(Char[] a, ref Char[] b, out Char[] c);
        String[] Array12(String[] a, ref String[] b, out String[] c);
        Blittable[] Array13(Blittable[] a, ref Blittable[] b, out Blittable[] c);
        NonBlittable[] Array14(NonBlittable[] a, ref NonBlittable[] b, out NonBlittable[] c);
        Nested[] Array15(Nested[] a, ref Nested[] b, out Nested[] c);

        Windows.Foundation.Collections.IIterable<String> Collection1(Windows.Foundation.Collections.IIterable<String> a, out Windows.Foundation.Collections.IIterable<String> b);
        Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, String> > Collection2(Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, String> > a, out Windows.Foundation.Collections.IIterable<Windows.Foundation.Collections.IKeyValuePair<String, String> > b);
        Windows.Foundation.Collections.IMap<String, String> Collection3(Windows.Foundation.Collections.IMap<String, String> a, out Windows.Foundation.Collections.IMap<String, String> b);
        Windows.Foundation.Collections.IMapView<String, String> Collection4(Windows.Foundation.Collections.IMapView<String, String> a, out Windows.Foundation.Collections.IMapView<String, String> b);
        Windows.Foundation.Collections.IVector<String> Collection5(Windows.Foundation.Collections.IVector<String> a, out Windows.Foundation.Collections.IVector<String> b);
        Windows.Foundation.Collections.IVectorView<String> Collection6(Windows.Foundation.Collections.IVectorView<String> a, out Windows.Foundation.Collections.IVectorView<String> b);

        Windows.Foundation.IAsyncAction Async1(Windows.Foundation.IAsyncAction suspend, Boolean fail);
        Windows.Foundation.IAsyncActionWithProgress<Int32> Async2(Windows.Foundation.IAsyncAction suspend, Boolean fail, Int32 progress);
        Windows.Foundation.IAsyncOperation<Int32> Async3(Windows.Foundation.IAsyncAction suspend, Boolean fail, Int32 result);
        Windows.Foundation.IAsyncOperationWithProgress<Int32, Int32> Async4(Windows.Foundation.IAsyncAction suspend, Boolean fail, Int32 result, Int32 progress);
    }

    delegate void TestHandler(ITests tests);

    runtimeclass TestRunner
    {
        // Throws an exception if ITests is not implemented correctly.
        static void TestProducer(ITests callee);

        // Returns 100 (percent) if the calling language projection faithfully covered all tests.
        static UInt32 TestConsumer(TestHandler caller);

        // Test C++/WinRT as both caller and callee.
        static void TestSelf();
    }
}
